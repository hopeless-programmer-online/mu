file       ::= SPACE? (statements SPACE?)? EOF

statements ::= (statement (SPACE statement)*)?
statement  ::= if | return | block | expression

if         ::= "if" SPACE? expression SPACE? "then" SPACE? statement
return     ::= "return" SPACE? expression?
block      ::= "{" SPACE? (statements SPACE?)? "}"

expression ::= le | sub | mul | atom
atom       ::= program | call | assignment | e_list | e_terminal
program    ::= "program" SPACE? t_group SPACE? statement
call       ::= e_terminal SPACE? e_group
assignment ::= target SPACE? "=" SPACE? expression
e_terminal ::= e_group | name | literal
e_group    ::= "(" SPACE? (expression SPACE?)? ")"
e_list     ::= e_terminal SPACE? "," (SPACE? expression (SPACE? "," SPACE? expression)* SPACE? ","?)?

le         ::= (sub | mul | atom) SPACE? "<=" SPACE? (le | sub | mul | atom)
sub        ::= (mul | atom) SPACE? "-" SPACE? (sub | mul | atom)
mul        ::= atom SPACE? "*" SPACE? (mul | atom)

target     ::= t_list | t_terminal
t_terminal ::= t_group | name
t_group    ::= "(" SPACE? (target SPACE?)? ")"
t_list     ::= t_terminal SPACE? "," (SPACE? target (SPACE? "," SPACE? target)* SPACE? ","?)?

name       ::= WORD
literal    ::= integer
integer    ::= [0-9](SPACE? [0-9])*

WORD       ::= [a-zA-Z_] [a-zA-Z0-9_]*
SPACE      ::= [ \t\n\r]+
